// Generated by Selenium IDE
package org.ual.hmis.database;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class ListadotareasTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
	// Browser selector
	    int browser= 0; // 0: firefox, 1: chrome,...
	    Boolean headless = false;

	    switch (browser) {
	    case 0:  // firefox
	    	// Firefox
	    	// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
	    	// Descomprimir el archivo geckodriver.exe en la carpeta drivers

	    	System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
	    	FirefoxOptions firefoxOptions = new FirefoxOptions();
	    	firefoxOptions.setHeadless(true);
	    	driver = new FirefoxDriver(firefoxOptions);

	    	break;
	    case 1: // chrome
	    	// Chrome
	    	// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
	    	// Descomprimir el archivo chromedriver.exe en la carpeta drivers

	    	System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
	    	ChromeOptions chromeOptions = new ChromeOptions();
	    	chromeOptions.setHeadless(true);
	    	chromeOptions.addArguments("window-size=1920,1080");
	    	driver = new ChromeDriver(chromeOptions);

	    	break;

	    default:
	    	fail("Please select a browser");
	    	break;
	    }
	    js = (JavascriptExecutor) driver;
	    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void listadotareasbien() {
    // Test name: listado-tareas-bien
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://msdocs-core-sql-2023-asm978.azurewebsites.net/");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 4 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 5 | type | id=Description | hola
    driver.findElement(By.id("Description")).sendKeys("hola");
    // 6 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 7 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 8 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 9 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 10 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 11 | type | id=Description | hola hola
    driver.findElement(By.id("Description")).sendKeys("hola hola");
    // 12 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 13 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 14 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 15 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 16 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 17 | type | id=Description | hola hola hola
    driver.findElement(By.id("Description")).sendKeys("hola hola hola");
    // 18 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 19 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 20 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 21 | assertText | css=td:nth-child(1) | hola
    assertThat(driver.findElement(By.cssSelector("td:nth-child(1)")).getText(), is("hola"));
    // 22 | assertText | css=tr:nth-child(2) > td:nth-child(1) | hola hola
    assertThat(driver.findElement(By.cssSelector("tr:nth-child(2) > td:nth-child(1)")).getText(), is("hola hola"));
    // 23 | assertText | css=tr:nth-child(3) > td:nth-child(1) | hola hola hola
    assertThat(driver.findElement(By.cssSelector("tr:nth-child(3) > td:nth-child(1)")).getText(), is("hola hola hola"));
    // 24 | click | linkText=Delete | 
    driver.findElement(By.linkText("Delete")).click();
    // 25 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 26 | click | linkText=Delete | 
    driver.findElement(By.linkText("Delete")).click();
    // 27 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 28 | click | linkText=Delete | 
    driver.findElement(By.linkText("Delete")).click();
    // 29 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
  }
  @Test
  public void listadotareasmal() {
    // Test name: listado-tareas-mal
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://msdocs-core-sql-2023-asm978.azurewebsites.net/");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 4 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 5 | type | id=Description | hola
    driver.findElement(By.id("Description")).sendKeys("hola");
    // 6 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 7 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 8 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 9 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 10 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 11 | type | id=Description | hola hola
    driver.findElement(By.id("Description")).sendKeys("hola hola");
    // 12 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 13 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 14 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 15 | click | linkText=Create New | 
    driver.findElement(By.linkText("Create New")).click();
    // 16 | click | id=Description | 
    driver.findElement(By.id("Description")).click();
    // 17 | type | id=Description | hola hola hola
    driver.findElement(By.id("Description")).sendKeys("hola hola hola");
    // 18 | click | id=CreatedDate | 
    driver.findElement(By.id("CreatedDate")).click();
    // 19 | type | id=CreatedDate | 2023-06-26
    driver.findElement(By.id("CreatedDate")).sendKeys("2023-06-26");
    // 20 | click | css=.btn | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 21 | assertNotText | css=tr:nth-child(1) > td:nth-child(1) | hola
    assertThat(driver.findElement(By.cssSelector("tr:nth-child(1) > td:nth-child(1)")).getText(), is(not("hola")));
    // 22 | assertNotText | css=tr:nth-child(2) > td:nth-child(1) | hola hola
    assertThat(driver.findElement(By.cssSelector("tr:nth-child(2) > td:nth-child(1)")).getText(), is(not("hola hola")));
    // 23 | assertNotText | css=tr:nth-child(3) > td:nth-child(1) | hola hola hola
    assertThat(driver.findElement(By.cssSelector("tr:nth-child(3) > td:nth-child(1)")).getText(), is(not("hola hola hola")));
  }
}
