// Generated by Selenium IDE
package org.ual.hmis.equipo20;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeOptions;
public class BotonesinferioresalejandroTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    // Browser selector
    int browser= 0; // 0: firefox, 1: chrome,...
    Boolean headless = false;

    switch (browser) {
    case 0:  // firefox
    	// Firefox
    	// Descargar geckodriver de https://github.com/mozilla/geckodriver/releases
    	// Descomprimir el archivo geckodriver.exe en la carpeta drivers

    	System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
    	FirefoxOptions firefoxOptions = new FirefoxOptions();
    	firefoxOptions.setHeadless(true);
    	driver = new FirefoxDriver(firefoxOptions);

    	break;
    case 1: // chrome
    	// Chrome
    	// Descargar Chromedriver de https://chromedriver.chromium.org/downloads
    	// Descomprimir el archivo chromedriver.exe en la carpeta drivers

    	System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
    	ChromeOptions chromeOptions = new ChromeOptions();
    	chromeOptions.setHeadless(true);
    	chromeOptions.addArguments("window-size=1920,1080");
    	driver = new ChromeDriver(chromeOptions);

    	break;

    default:
    	fail("Please select a browser");
    	break;
    }
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void botonalejandrogithub() {
    // Test name: boton-alejandro-github
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | css=li:nth-child(1) > .icon | 
    driver.findElement(By.cssSelector("li:nth-child(1) > .icon")).click();
    // 6 | assertText | css=.p-name | Alejandro Tom치s Soto Meca
    assertThat(driver.findElement(By.cssSelector(".p-name")).getText(), is("Alejandro Tom치s Soto Meca"));
  }
  @Test
  public void botonalejandrohtml5() {
    // Test name: boton-alejandro-html5
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | linkText=HTML5 UP | 
    driver.findElement(By.linkText("HTML5 UP")).click();
    // 6 | assertText | css=.about > strong | spiffy HTML5\nsite templates
    assertThat(driver.findElement(By.cssSelector(".about > strong")).getText(), is("spiffy HTML5\\\\nsite templates"));
  }
  @Test
  public void botonalejandrorepo() {
    // Test name: boton-alejandro-repo
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | css=li:nth-child(2) > .icon | 
    driver.findElement(By.cssSelector("li:nth-child(2) > .icon")).click();
    // 6 | assertText | id=repository-container-header | AlejandroTSoto\n/\nSesion04-2023\nPublic\nPin\nUnwatch 1\nFork 1\nFork your own copy of AlejandroTSoto/Sesion04-2023\nStar 0\nCode\nIssues\nPull requests\nActions\nProjects\nWiki\nSecurity\nInsights\nSettings
    assertThat(driver.findElement(By.id("repository-container-header")).getText(), is("AlejandroTSoto\\\\n/\\\\nSesion04-2023\\\\nPublic\\\\nPin\\\\nUnwatch 1\\\\nFork 1\\\\nFork your own copy of AlejandroTSoto/Sesion04-2023\\\\nStar 0\\\\nCode\\\\nIssues\\\\nPull requests\\\\nActions\\\\nProjects\\\\nWiki\\\\nSecurity\\\\nInsights\\\\nSettings"));
  }
  @Test
  public void nobotonalejandrohtml5() {
    // Test name: no-boton-alejandro-html5
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | linkText=HTML5 UP | 
    driver.findElement(By.linkText("HTML5 UP")).click();
    // 6 | assertNotText | css=.about > strong | spiffy HTML5\nsite templates
    assertThat(driver.findElement(By.cssSelector(".about > strong")).getText(), is(not("spiffy HTML5\\\\nsite templates")));
  }
  @Test
  public void nobotonalejandrorepo() {
    // Test name: no-boton-alejandro-repo
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | css=li:nth-child(2) > .icon | 
    driver.findElement(By.cssSelector("li:nth-child(2) > .icon")).click();
    // 6 | assertNotText | id=repository-container-header | AlejandroTSoto\n/\nSesion04-2023\nPublic\nPin\nUnwatch 1\nFork 1\nFork your own copy of AlejandroTSoto/Sesion04-2023\nStar 0\nCode\nIssues\nPull requests\nActions\nProjects\nWiki\nSecurity\nInsights\nSettings
    assertThat(driver.findElement(By.id("repository-container-header")).getText(), is(not("AlejandroTSoto\\\\n/\\\\nSesion04-2023\\\\nPublic\\\\nPin\\\\nUnwatch 1\\\\nFork 1\\\\nFork your own copy of AlejandroTSoto/Sesion04-2023\\\\nStar 0\\\\nCode\\\\nIssues\\\\nPull requests\\\\nActions\\\\nProjects\\\\nWiki\\\\nSecurity\\\\nInsights\\\\nSettings")));
  }
  @Test
  public void nobotonalejandrogithub() {
    // Test name: no-boton-alejandro-github
    // Step # | name | target | value
    // 1 | open | https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html | 
    driver.get("https://hmis2023-sesion04-freeweb.azurewebsites.net/index.html");
    // 2 | setWindowSize | 1021x727 | 
    driver.manage().window().setSize(new Dimension(1021, 727));
    // 3 | click | linkText=Miembros | 
    driver.findElement(By.linkText("Miembros")).click();
    // 4 | click | linkText=Alejandro | 
    driver.findElement(By.linkText("Alejandro")).click();
    // 5 | click | css=li:nth-child(1) > .icon | 
    driver.findElement(By.cssSelector("li:nth-child(1) > .icon")).click();
    // 6 | assertNotText | css=.p-name | Alejandro Tom치s Soto Meca
    assertThat(driver.findElement(By.cssSelector(".p-name")).getText(), is(not("Alejandro Tom치s Soto Meca")));
  }
}
